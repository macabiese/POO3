#Emile Macabies
#Janvier 2023

#importation
from random import *

#fonction pour assigner des statistiques aleatoirement
def stats_random():
    de1 = randint(1, 6)
    de2 = randint(1, 6)
    de3 = randint(1, 6)
    de4 = randint(1, 6)
    liste_des = [de1, de2, de3, de4]
    liste_des.sort()
    liste_des.pop(0)
    calcul_liste_des = sum(liste_des)
    return calcul_liste_des

#creation de la classe NPC 
class NPC:

    #initialisation ou les parametres du npc sont definis
    def __init__(self, nom, race, espece, profession):
    
        #parametres definis aleatoirement par la fonction stats_random()
        self.force = stats_random()
        
        self.agilite = stats_random()

        self.constitution = stats_random()

        self.intelligence = stats_random()

        self.sagesse = stats_random()
                 
        self.classe_armure = randint(1, 12)
        self.point_de_vie = randint(1, 20)

        #parametre definis par le joueur
        self.nom = nom
        self.race = race
        self.espece = espece
        self.profession = profession
        
    #methode qui affiche les infos du npc
    def afficher_caracteristiques(self):
        print("Le nom est:", self.nom, "la race est:", self.race, "l'espece est:", self.espece, "la profession est",
              self.profession)
        print("La force est:", self.force, "l'agilite est:", self.agilite, "le charisme est:", self.charisme,
              "la constitution est:", self.constitution, "l'intelligence est:", self.intelligence)
        print("La classe d'armure est:", self.classe_armure, "Les points de vie sont:", self.point_de_vie)

#creation de la classe kobold qui herite de la classe NPC
class kobold(NPC):

    #initialisation ou la classe herite des parametres de NPC
    def __init__(self, par1, par2, par3, par4):
        super().__init__(par1, par2, par3, par4)

    #methode pour attaquer qui prends une cible en parametre
    def attaquer(self, cible):
        self.npc = cible
        return

    #methode pour subir des dommages ou la quantite de dommage est prise en parametre
    def subir_dommage(self, quantite_dommage):
        return

#creation de la classe Heros qui herite de la classe NPC
class Heros(NPC):
    
    #initialisation ou la classe herite des parametres de NPC
    def __init__(self, par1, par2, par3, par4):
        super().__init__(par1, par2, par3, par4)

    #methode pour attaquer qui prends une cible en parametre
    def attaquer(self, cible):

        #un de est lance pour definir quel type d'attaque le Heros fera
        lancer_de_hero = randint(1, 20)

        if lancer_de_hero == 1:
            print("Attaque ratee!")

        if lancer_de_hero == 20:
            nb_dommage = randint(1, 8)
            cible.subir_dommage = nb_dommage
            print("Coup critique, le monstre subi", nb_dommage, "de dommage!")

        if 2 < lancer_de_hero < 20:
            print("La classe d'armure du monstre est", self.classe_armure)

            if lancer_de_hero >= self.classe_armure:
                nb_dommage = randint(1, 6)
                cible.subir_dommage = nb_dommage
                print("L'attaque penetre l'armure et inflige", nb_dommage, "degat(s)")

            if lancer_de_hero < self.classe_armure:
                print("L'attaque n'est pas assez forte!")
        return

    #methode pour subir des dommages ou la quantite de dommage est prise en parametre
    def subir_dommage(self, quantite_dommage):
        return
